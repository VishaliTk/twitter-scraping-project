{"cells":[{"cell_type":"markdown","metadata":{"id":"x9KBJzEsWufO"},"source":["   Scraping the data from the twitter using snscraper and streamlit library"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-FDetyujqHo5"},"outputs":[],"source":["!pip install dnspython\n","!pip install pymongo[srv]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hd2MtrwgyhSS"},"outputs":[],"source":["pip install git+https://github.com/JustAnotherArchivist/snscrape.git"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cxlgfBg_qHrM"},"outputs":[],"source":["!pip install snscrape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S8XSUqKTqHu5"},"outputs":[],"source":["!pip install -q streamlit"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":538,"status":"ok","timestamp":1678962448101,"user":{"displayName":"Vishalithanesh Thanesh","userId":"12481604239704410052"},"user_tz":-330},"id":"ODoZ2z6mWp4V","outputId":"745d72f6-4b14-4108-ba00-4d9a0a3ef2f4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Writing app.py\n"]}],"source":["%%writefile app.py\n","\n","#............importing the packages............#\n","\n","import snscrape .modules.twitter as sntwitter\n","import pandas as pd\n","import streamlit as st\n","import pymongo \n","from pymongo import MongoClient\n","from datetime import date\n","import json\n"," \n","\n","#................Connecting the mongodb database where db = guvipro and collection = twitterstreamlit...............#\n","\n","client = pymongo.MongoClient(\"mongodb+srv://vishali:25112001@cluster0.jy5i2fg.mongodb.net/?retryWrites=true&w=majority\")\n","db = client.guviproj\n","records_main = db.twitterstreamlit\n","\n","#..............create a function called main for creating a web app called streamlit..............#\n","\n","def main():\n","  tweets = 0\n","  st.title(\"scraping the twitter data\")\n","  menu = [\"Home\",\"Search\",\"Display\",\"Download\"]\n","  choice = st.sidebar.selectbox(\"menu\",menu)\n","\n","  #........creating the menu 1 == \"home\"........\n","\n","  if choice == \"Home\":\n","    st.write('''This app is a twitter scraping web app created using streamlit.it scrape the data for the given hastag/keyword for the given perriod\n","             the tweets are uploaded in mongodb and can be downloaded as csv or json files''')\n","    \n","\n","  #........creating menu 2 == \"search\"..........\n","\n","\n","  elif choice == \"Search\":\n","    \n","    #......CLEARING THE DATA FOR NEW UPDATING......\n","\n","    records_main.delete_many({})\n","\n","    #......USER INPUT FORM.......\n","\n","    with st.form (key = 'form'):\n","      st.subheader(\"Fill the twitter form\")\n","      st.write(\"Enter the hastag or keyword\")\n","      word = st.text_input(\"hastag or keyword\")\n","\n","      #.......HOW MANY TWEETS DO YOU WANT?.......\n","      st.write(\"How many tweets do you want?:max limit 1000 tweets\")\n","      limit = st.number_input(\"Number of tweets:\",min_value = 0,max_value = 1000,step = 10)\n","\n","\n","      #.......STARTING DATE TO ENDING DATE.........\n","      st.write(\"Enter the starting date and ending date\")\n","      start = st.date_input('From')\n","      end = st.date_input('To')\n","\n","      #........SUBMIT BUTTON.........\n","      submit_button = st.form_submit_button(label = \"Scrape the tweets\")\n","    \n","\n","    if submit_button:\n","      st.success(f'Tweet {word} received for scraping'.format(word))\n","\n","      #.......SCRAPED DATA WILL STORED IN MONGODB DATABASE......\n","      for tweet in sntwitter.TwitterSearchScraper(f'from:{word} since:{start} until:{end}').get_items():\n","        if tweets == limit:\n","          break\n","        else:\n","          store = {\"date\":tweet.date,\"user\":tweet.user.username,\"url\":tweet.url,\"id\":tweet.id,\"content\":tweet.content,\"replyCount\":tweet.replyCount,\"source\":tweet.source,\"likeCount\":tweet.likeCount}\n","          records_main.insert_one(store)\n","          tweets += 1\n","      \n","      #.........FINDING THE COUNT USEING PANDAS.......\n","\n","      df = pd.DataFrame(list(records_main.find()))\n","      cnt = len(df)\n","      st.success(f'Total numbser of tweets scraped:{cnt}'.format(cnt))\n","\n","  #........CREATING THE MENU 3 = \"DISPLAYING\".........\n","\n","  elif choice == \"Display\":\n","    df = pd.DataFrame(list(records_main.find()))\n","    st.dataframe(df)\n","\n","\n","  #........CREATING THE MENU 4 = \"DOWNLOADING\"..........\n","\n","  else:\n","    col1,col2 = st.columns(2)\n","\n","    #...DOWNLOADING DATA AS CSV.....\n","\n","    with col1:\n","      st.write(\"Download data as csv file\")\n","      df = pd.DataFrame(list(records_main.find()))\n","      df.to_csv('twittercsv.csv')\n","\n","      def convert_df(data):\n","        return df.to_csv().encode('utf-8')\n","      csv = convert_df(df)\n","      st.download_button(\n","                         label = \"Download data as csv\",\n","                         data = csv,\n","                         file_name = \"twittercsv.csv\",\n","                         mime = \"text/csv\",\n","                        )\n","      st.success(\"Download completed,data as csv\")\n","      \n","\n","    #...DOWNLOADING DATA AS JSON .....\n","    \n","    with col2:\n","      st.write(\"Download data as json file\")\n","      twtjs = df.to_json(default_handler = str).encode()\n","      obj = json.loads(twtjs)\n","      js = json.dumps(obj,indent = 4)\n","      st.download_button(\n","                         label = \"Download data as json\",\n","                         data = js,\n","                         file_name = \"twtjs.js\",\n","                         mime = \"text/js\",\n","                        )\n","      \n","      st.success(\"Download completed,data as json\")\n","     \n","\n","\n","#.......FINALLY CALLING THE FUNCTION(MAIN)...........\n","\n","main()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2942,"status":"ok","timestamp":1678962461373,"user":{"displayName":"Vishalithanesh Thanesh","userId":"12481604239704410052"},"user_tz":-330},"id":"G-umVoS34YFj","outputId":"7fdc227f-4631-40ba-b89e-9c11818e4aad"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35msaveError\u001b[0m ENOENT: no such file or directory, open '/content/package.json'\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[34;40mnotice\u001b[0m\u001b[35m\u001b[0m created a lockfile as package-lock.json. You should commit this file.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35menoent\u001b[0m ENOENT: no such file or directory, open '/content/package.json'\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No description\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No repository field.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No README data\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No license field.\n","\u001b[0m\n","+ tunnel@0.0.6\n","+ local@0.3.3\n","added 4 packages from 4 contributors and audited 4 packages in 1.392s\n","found \u001b[92m0\u001b[0m vulnerabilities\n","\n","\u001b[K\u001b[?25h"]}],"source":["!npm install local tunnel"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1rB9pdSEWnlY"},"outputs":[],"source":["!streamlit run /content/app.py &>/content/log.txt &"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"GemwNtdsrF1T","outputId":"94157fa5-344c-4697-8c64-3510bda65c6f"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[K\u001b[?25hnpx: installed 22 in 2.418s\n","your url is: https://tough-suits-rule-35-233-156-111.loca.lt\n"]}],"source":["!npx localtunnel --port 8501"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FY8JthN4yQ3v"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RJC9nAWhrNmy"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP1PsbviuNF/X7jFOBxIQiL"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}